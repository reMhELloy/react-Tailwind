import { createContext, type PropsWithChildren, useContext, useState } from "react"

interface CountProviderProps extends PropsWithChildren {}
interface CountContextInterface {
    count: number
    setCount: (count: number) => void
    increment: () => void
}

const CountContext = createContext<CountContextInterface | undefined>(undefined)

const useCountContext = () => {
    const context = useContext(CountContext)
    console.log("üöÄ ~ useCountContext ~ context:", context)
    if (!context) {
        throw new Error('useCountContext ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong CountProvider')
    }
    return context
}

// Component Provider - Cung c·∫•p gi√° tr·ªã context cho to√†n b·ªô ·ª©ng d·ª•ng
// Nh·∫≠n v√†o children props ƒë·ªÉ c√≥ th·ªÉ wrap c√°c components con
const CountProvider = ({ children }: CountProviderProps) => {
    const [count, setCount] = useState(0)

    const increment = () => {
        setCount(prev => prev + 1)
    }
    
    // Tr·∫£ v·ªÅ Provider bao b·ªçc children
    // value prop ch·ª©a t·∫•t c·∫£ c√°c gi√° tr·ªã v√† h√†m c·∫ßn chia s·∫ª
    return (
        <CountContext.Provider value={{ count, setCount, increment}}>
            {children}
        </CountContext.Provider>
    )
}

export { CountProvider, useCountContext}